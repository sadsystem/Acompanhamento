// File: /src/App.tsx
// Revisão: correção de sintaxe no LoginPage (submit) + melhorias gerais

import React, { useEffect, useMemo, useState } from "react";

/*************************
 * 1) TIPOS & CONFIG
 *************************/

type Role = "admin" | "colaborador";

type User = {
  id: string;
  username: string; // login (para novos cadastros: CPF apenas dígitos)
  password: string; // protótipo
  displayName: string; // nome completo
  role: Role;
  active: boolean;
  cargo?: string; // Motorista | Ajudante | Gestor
  cpf?: string;   // para exibição/máscara
};

type Question = {
  id: string;
  text: string;
  order: number;
  goodWhenYes: boolean; // se SIM é positivo
  requireReasonWhen: "yes" | "no" | "never"; // exige motivo
};

type Answer = { questionId: string; value: boolean; reason?: string };

type Evaluation = {
  id: string;
  createdAt: string;   // ISO em hora de Brasília
  dateRef: string;     // YYYY-MM-DD (dia em Brasília)
  evaluator: string;   // username
  evaluated: string;   // username
  answers: Answer[];
  score: number;       // 0..1
  status: "queued" | "synced";
};

const CONFIG = {
  appName: "Sistema de Acompanhamento Diário - Ouro Verde",
  alertThreshold: 0.3,
  questions: [
    { id: "pontualidade", text: "Chegou dentro do horário estipulado?", order: 1, goodWhenYes: true, requireReasonWhen: "no" },
    { id: "conduta", text: "Foi educado e prestativo nas atividades de hoje?", order: 2, goodWhenYes: true, requireReasonWhen: "no" },
    { id: "desvio_rota", text: "Houve desvio de rota ao longo do dia?", order: 3, goodWhenYes: false, requireReasonWhen: "yes" },
    { id: "avaria", text: "Causou alguma avaria ao manusear os produtos?", order: 4, goodWhenYes: false, requireReasonWhen: "yes" },
  ] as Question[],
  seedUsers: [
    { id: "u1", username: "admin",  password: "admin123", displayName: "Administrador", role: "admin",       active: true, cargo: "Gestor" },
    { id: "u2", username: "teste",  password: "teste123", displayName: "Usuário Teste", role: "colaborador", active: true, cargo: "Motorista" },
    { id: "u3", username: "maria",  password: "123456",   displayName: "Maria Silva",   role: "colaborador", active: true, cargo: "Ajudante" },
    { id: "u4", username: "joao",   password: "123456",   displayName: "João Santos",   role: "colaborador", active: true, cargo: "Motorista" },
    { id: "u5", username: "carlos", password: "123456",   displayName: "Carlos Almeida",role: "colaborador", active: true, cargo: "Ajudante" },
  ] as User[],
};

/*************************
 * 2) STORAGE LOCAL (protótipo)
 *************************/

const LS = {
  users: "sad_users",
  session: "sad_session",
  evaluations: "sad_evals",
  remember: "sad_remember",
};

function readLS<T>(key: string, fallback: T): T { try { const raw = localStorage.getItem(key); return raw ? (JSON.parse(raw) as T) : fallback; } catch { return fallback; } }
function writeLS<T>(key: string, value: T) { localStorage.setItem(key, JSON.stringify(value)); }
function getUsers(): User[] { return readLS<User[]>(LS.users, []); }
function setUsers(u: User[]) { writeLS(LS.users, u); }
function getSession(): { username: string } | null { return readLS(LS.session, null as any); }
function setSession(username: string) { writeLS(LS.session, { username }); }
function clearSession() { localStorage.removeItem(LS.session); }
function getEvaluations(): Evaluation[] { return readLS<Evaluation[]>(LS.evaluations, []); }
function setEvaluations(list: Evaluation[]) { writeLS(LS.evaluations, list); }
function setRemember(flag: boolean) { if (flag) localStorage.setItem(LS.remember, JSON.stringify(true)); else localStorage.removeItem(LS.remember); }
function ensureFirstLogin() { const remembered = readLS<boolean>(LS.remember, false as any); if (!remembered) clearSession(); }
function ensureSeedUsers() { const existing = readLS<User[]>(LS.users, []); const map = new Map(existing.map(u => [u.username, u])); let changed = false; for (const su of CONFIG.seedUsers) if (!map.has(su.username)) { existing.push(su); changed = true; } if (changed) writeLS(LS.users, existing); }
function seedDefaults() { const users = readLS<User[]>(LS.users, []); if (users.length === 0) writeLS(LS.users, CONFIG.seedUsers); else ensureSeedUsers(); if (readLS<Evaluation[]>(LS.evaluations, []).length === 0) writeLS(LS.evaluations, []); }

/*************************
 * 3) AUTH
 *************************/
function login(username: string, password: string): { ok: boolean; error?: string } { const u = getUsers().find(x => x.username === username && x.active); if (!u) return { ok: false, error: "Usuário não encontrado/ativo" }; if (u.password !== password) return { ok: false, error: "Senha incorreta" }; setSession(u.username); return { ok: true }; }
function currentUser(): User | null { const s = getSession(); if (!s) return null; return getUsers().find(u => u.username === s.username) || null; }
function logout() { clearSession(); localStorage.removeItem(LS.remember); }

/*************************
 * 4) UTILS
 *************************/
function uuid() { const c = (globalThis as any)?.crypto; return (c && typeof c.randomUUID === "function") ? c.randomUUID() : Math.random().toString(36).slice(2); }
function calcScore(answers: Answer[], questions: Question[]): number { const map = new Map(questions.map(q => [q.id, q])); let good = 0; for (const a of answers) { const q = map.get(a.questionId); if (!q) continue; if (a.value === q.goodWhenYes) good += 1; } const total = questions.length || 1; return Number((good / total).toFixed(2)); }

// Hora de Brasília (independe do relógio do dispositivo)
function nowInBrazil(): Date { const local = new Date().toLocaleString('en-US', { timeZone: 'America/Sao_Paulo' }); return new Date(local); }
function toDateRefBR(d?: Date): string { const x = d ?? nowInBrazil(); const y = x.getFullYear(); const m = String(x.getMonth()+1).padStart(2,'0'); const dd = String(x.getDate()).padStart(2,'0'); return `${y}-${m}-${dd}`; }
function formatDateTimeBR(d?: Date): string { const x = d ?? nowInBrazil(); const dd = String(x.getDate()).padStart(2,'0'); const mm = String(x.getMonth()+1).padStart(2,'0'); const yy = x.getFullYear(); const hh = String(x.getHours()).padStart(2,'0'); const mi = String(x.getMinutes()).padStart(2,'0'); const ss = String(x.getSeconds()).padStart(2,'0'); return `${dd}/${mm}/${yy} ${hh}:${mi}:${ss}`; }
function formatDateTimeBRdash(d?: Date): string { const dt = formatDateTimeBR(d); const [date, time] = dt.split(' '); return `${date} - ${time}`; }

// Equipe do dia (placeholder)
function getAllowedPartnersForDate(me: User, _dateRef: string): User[] { return getUsers().filter(u => u.active && u.role === "colaborador" && u.username !== me.username); }

/*************************
 * 5) UI – ATOMS
 *************************/
function Button(
  { children, onClick, type = "button", variant = "primary", disabled }:
  { children: React.ReactNode; onClick?: () => void; type?: "button" | "submit" | "reset"; variant?: "primary" | "secondary" | "ghost" | "accent" | "success"; disabled?: boolean; }
) {
  const base = "rounded-full px-5 py-2 text-sm font-semibold transition select-none focus:outline-none focus:ring-2 focus:ring-black/10";
  const styles = { primary: "bg-neutral-900 text-white hover:opacity-90", secondary: "bg-white text-black ring-1 ring-gray-200 hover:bg-gray-50", ghost: "bg-transparent text-black hover:bg-gray-100", accent: "bg-blue-600 text-white hover:bg-blue-700", success: "bg-green-600 text-white hover:bg-green-700" } as const;
  const state = disabled ? "cursor-not-allowed opacity-75" : "cursor-pointer";
  return <button type={type} onClick={onClick} disabled={disabled} className={`${base} ${styles[variant]} ${state}`}>{children}</button>;
}
function Card({ children, className = "" }: { children: React.ReactNode; className?: string }) { return <div className={`rounded-2xl border p-4 shadow-sm bg-white ${className}`}>{children}</div>; }
function Badge({ children }: { children: React.ReactNode }) { return <span className="inline-flex items-center rounded-full px-2 py-0.5 text-xs border">{children}</span>; }
function FieldLabel({ htmlFor, children, required }: { htmlFor: string; children: React.ReactNode; required?: boolean }) { return <label htmlFor={htmlFor} className="text-sm font-medium">{children} {required && <span className="text-red-600">*</span>}</label>; }

/*************************
 * 6) PÁGINAS – COLABORADOR
 *************************/

type Route = "login" | "selectPartner" | "checklist" | "dashboard" | "admin";

type ChecklistDraft = { evaluated?: string; answers: Record<string, { value: boolean | null; reason: string }>; dateRef: string };

function LoginPage({ onLoggedIn }: { onLoggedIn: () => void }) {
  const [username, setU] = useState("");
  const [password, setP] = useState("");
  const [remember, setRememberState] = useState(false);
  const [err, setErr] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  function submit(e: React.FormEvent) {
    e.preventDefault();
    const r = login(username.trim(), password);
    if (!r.ok) { setErr(r.error || "Falha"); return; }
    setErr(null);
    setRemember(remember);
    setLoading(true);
    setTimeout(() => { onLoggedIn(); setLoading(false); }, 700);
  }

  return (
    <div className="min-h-[70vh] flex items-center justify-center p-4">
      <Card>
        <h1 className="text-xl font-semibold mb-4 text-center uppercase tracking-wide">ENTRAR</h1>
        <form onSubmit={submit} className="flex flex-col gap-3">
          <div className="flex flex-col gap-1"><FieldLabel htmlFor="u">Usuário</FieldLabel><input id="u" className="border rounded-xl px-3 py-2" value={username} onChange={(e)=>setU(e.target.value)} placeholder="admin ou teste"/></div>
          <div className="flex flex-col gap-1"><FieldLabel htmlFor="p">Senha</FieldLabel><input id="p" type="password" className="border rounded-xl px-3 py-2" value={password} onChange={(e)=>setP(e.target.value)} placeholder="admin123 ou teste123"/></div>
          <label className="inline-flex items-center gap-2 text-xs text-gray-700 select-none"><input type="checkbox" className="h-4 w-4" checked={remember} onChange={(e)=>setRememberState(e.target.checked)} /> Lembrar login neste dispositivo</label>
          {err && <div className="text-sm text-red-600">{err}</div>}
          <div className="mt-2 flex justify-center"><Button type="submit" disabled={loading}>{loading?"Acessando...":"Entrar"}</Button></div>
        </form>
      </Card>
      {loading && (
        <div className="fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center">
          <div className="bg-white border rounded-2xl p-6 text-center shadow-lg">
            <div className="mx-auto mb-2 h-10 w-10 rounded-full border-2 border-gray-300 border-t-transparent animate-spin" />
            <div className="text-sm">Acessando...</div>
          </div>
        </div>
      )}
    </div>
  );
}

function SelectPartnerPage({ me, onSelected }: { me: User; onSelected: (username: string) => void }) {
  const [q, setQ] = useState("");
  const users = getAllowedPartnersForDate(me, toDateRefBR());
  const today = toDateRefBR();
  const already = new Set(getEvaluations().filter(e => e.evaluator === me.username && e.dateRef === today).map(e => e.evaluated));
  const filtered = users.filter(u => (u.displayName + " " + u.username).toLowerCase().includes(q.toLowerCase()));
  return (
    <div className="max-w-3xl mx-auto p-4">
      <Card>
        <h2 className="text-lg font-semibold mb-2 text-center uppercase tracking-wide">SELECIONE O PARCEIRO DE EQUIPE</h2>
        <div className="flex items-end gap-2">
          <div className="flex-1"><FieldLabel htmlFor="busca">Buscar</FieldLabel><input id="busca" className="border rounded-xl px-3 py-2 w-full" placeholder="Nome" value={q} onChange={(e)=>setQ(e.target.value)} /></div>
        </div>
        <div className="mt-3 grid grid-cols-1 gap-2">
          {filtered.map(u => (
            <div key={u.username}
                 onClick={!already.has(u.username) ? ()=>onSelected(u.username) : undefined}
                 className={`flex items-center justify-between border rounded-2xl px-3 py-2 ${already.has(u.username) ? '' : 'cursor-pointer hover:bg-gray-50'}`}>
              <div className="text-sm"><div className="font-medium">{u.displayName}</div><div className="text-gray-600">{u.cargo || "Colaborador"}</div></div>
              <Button variant={already.has(u.username) ? "success" : "accent"} disabled={already.has(u.username)} onClick={()=>onSelected(u.username)}>
                {already.has(u.username) ? "Enviado" : "Escolher"}
              </Button>
            </div>
          ))}
          {filtered.length===0 && (
            <div className="text-sm text-gray-600">Nenhum colaborador encontrado.</div>
          )}
        </div>
      </Card>
    </div>
  );
}

function ChecklistPage({ me, evaluated, onSaved }: { me: User; evaluated: User; onSaved: () => void }) {
  const [draft, setDraft] = useState<ChecklistDraft>(() => ({ evaluated: evaluated.username, dateRef: toDateRefBR(), answers: Object.fromEntries(CONFIG.questions.map(q => [q.id, { value: null, reason: "" }])) }));
  const [saving, setSaving] = useState(false);
  const [phase, setPhase] = useState<"idle"|"sending"|"success">("idle");
  const [nowBr, setNowBr] = useState<Date>(() => nowInBrazil());
  const [invalidKeys, setInvalidKeys] = useState<Set<string>>(new Set());
  useEffect(() => { const id = setInterval(() => setNowBr(nowInBrazil()), 1000); return () => clearInterval(id); }, []);

  function validate(): string[] {
    const errs: string[] = [];
    const invalid: string[] = [];
    for (const q of CONFIG.questions) {
      const a = draft.answers[q.id];
      if (a.value === null) { errs.push(`Marque SIM/NÃO: ${q.text}`); invalid.push(q.id); }
      const needReason = (q.requireReasonWhen === "yes" && a.value === true) || (q.requireReasonWhen === "no" && a.value === false);
      if (needReason && !a.reason.trim()) { errs.push(`Descreva o motivo em: ${q.text}`); invalid.push(q.id); }
    }
    if (invalid.length) {
      setInvalidKeys(new Set(invalid));
      setTimeout(() => setInvalidKeys(new Set()), 800);
      const first = document.getElementById(`qid-${invalid[0]}`);
      first?.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
    return errs;
  }

  function handleSave(e: React.FormEvent) {
    e.preventDefault();
    const errs = validate(); if (errs.length) { return; }
    setSaving(true); setPhase("sending");
    const answers: Answer[] = CONFIG.questions.map(q => ({ questionId: q.id, value: !!draft.answers[q.id].value, reason: draft.answers[q.id].reason.trim() || undefined }));
    const score = calcScore(answers, CONFIG.questions);
    const brNow = nowInBrazil(); const ref = toDateRefBR(brNow);
    const evalItem: Evaluation = { id: uuid(), createdAt: brNow.toISOString(), dateRef: ref, evaluator: me.username, evaluated: evaluated.username, answers, score, status: "queued" };
    const list = getEvaluations();
    const exists = list.find(e => e.evaluator === me.username && e.evaluated === evaluated.username && e.dateRef === ref);
    if (exists) { alert("Já existe uma avaliação para este parceiro neste dia. Tente novamente amanhã."); setSaving(false); onSaved(); return; }
    list.unshift(evalItem); setEvaluations(list);
    setPhase("success"); setTimeout(() => { setSaving(false); onSaved(); }, 900);
  }

  return (
    <div className="max-w-3xl mx-auto p-4">
      <Card>
        <div className="mb-4 text-center">
          <h2 className="text-xl font-semibold">Acompanhamento Diário</h2>
          <div className="text-sm text-gray-600">Avaliando: <b>{evaluated.displayName}</b> — {evaluated.cargo || "Colaborador"}</div>
          <div className="mt-1 text-xs text-gray-500">Data/Hora (Brasília): {formatDateTimeBR(nowBr)}</div>
        </div>
        <form onSubmit={handleSave} className="flex flex-col gap-4">
          {CONFIG.questions.sort((a,b)=>a.order-b.order).map(q => {
            const a = draft.answers[q.id];
            const needReason = (q.requireReasonWhen === "yes" && a.value === true) || (q.requireReasonWhen === "no" && a.value === false);
            const isInvalid = invalidKeys.has(q.id);
            return (
              <div id={`qid-${q.id}`} key={q.id} className={`border rounded-2xl p-3 ${isInvalid ? 'ring-2 ring-red-400 animate-pulse' : ''}`}>
                <div className="font-medium">{q.text} <span className="text-red-600">*</span></div>
                <div className="mt-2 flex items-center gap-2">
                  <Button variant={a.value===true?"primary":"secondary"} onClick={()=>setDraft({ ...draft, answers: { ...draft.answers, [q.id]: { ...a, value: true } } })}>SIM</Button>
                  <Button variant={a.value===false?"primary":"secondary"} onClick={()=>setDraft({ ...draft, answers: { ...draft.answers, [q.id]: { ...a, value: false } } })}>NÃO</Button>
                  <div className="text-xs text-gray-600">{q.goodWhenYes ? "SIM é bom" : "NÃO é bom"}</div>
                </div>
                {needReason && (
                  <div className="mt-2">
                    <FieldLabel htmlFor={`r-${q.id}`} required>Explique</FieldLabel>
                    <textarea id={`r-${q.id}`} className={`border rounded-xl px-3 py-2 w-full min-h-[70px] ${isInvalid && (!a.reason.trim()) ? 'ring-2 ring-red-400' : ''}`} placeholder="Descreva o ocorrido" value={a.reason} onChange={(e)=>setDraft({ ...draft, answers: { ...draft.answers, [q.id]: { ...a, reason: e.target.value } } })} />
                  </div>
                )}
              </div>
            );
          })}
          <div className="flex items-center justify-end gap-2">
            <Button variant="ghost" onClick={()=>setDraft({ evaluated: evaluated.username, dateRef: toDateRefBR(), answers: Object.fromEntries(CONFIG.questions.map(q => [q.id, { value: null, reason: "" }])) })}>Limpar</Button>
            <Button type="submit" disabled={saving}>{saving?"Salvando...":"Enviar"}</Button>
          </div>
        </form>

        {phase!=="idle" && (
          <div className="fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center">
            <div className="bg-white border rounded-2xl p-6 text-center shadow-lg">
              {phase === "sending" ? (
                <div className="mx-auto mb-2 h-10 w-10 rounded-full border-2 border-gray-300 border-t-transparent animate-spin" />
              ) : (
                <div className="mx-auto mb-2 h-10 w-10 rounded-full border-2 flex items-center justify-center">✓</div>
              )}
              <div className="text-sm">{phase === "sending" ? "Enviando..." : "Enviado com sucesso"}</div>
            </div>
          </div>
        )}
      </Card>
    </div>
  );
}

/*************************
 * 7) PÁGINAS – GESTÃO/ADMIN
 *************************/

function DashboardPage() {
  const [from, setFrom] = useState<string>(() => toDateRefBR());
  const [to, setTo] = useState<string>(() => toDateRefBR());
  const [userId, setUserId] = useState("");
  const evals = getEvaluations();
  const users = getUsers();

  function inRange(d: string) { return (!from || d >= from) && (!to || d <= to); }
  const filtered = evals.filter(e => inRange(e.dateRef) && (!userId || e.evaluated === userId));

  const totals = useMemo(() => {
    const byUser = new Map<string, {n:number, scoreSum:number}>();
    for (const ev of filtered) { const x = byUser.get(ev.evaluated) || { n:0, scoreSum:0 }; x.n += 1; x.scoreSum += ev.score; byUser.set(ev.evaluated, x); }
    const top = [...byUser.entries()].sort((a,b)=> (b[1].scoreSum/b[1].n) - (a[1].scoreSum/a[1].n)).slice(0,5);
    return { top };
  }, [filtered]);

  const alerts = useMemo(() => {
    type Key = string;
    const bad: Record<Key, {bad:number, total:number}> = {};
    for (const ev of filtered) for (const a of ev.answers) {
      const q = CONFIG.questions.find(q=>q.id===a.questionId)!; const isBad = (a.value !== q.goodWhenYes);
      const key = `${ev.evaluated}|${a.questionId}`; bad[key] = bad[key] || { bad:0, total:0 }; bad[key].total += 1; if (isBad) bad[key].bad += 1;
    }
    return Object.entries(bad).map(([k,v]) => { const [evaluated, qid] = k.split("|"); const pct = v.total ? v.bad / v.total : 0; return { evaluated, questionId: qid, pct, total:v.total }; }).filter(r => r.pct >= CONFIG.alertThreshold).sort((a,b)=> b.pct - a.pct);
  }, [filtered]);

  function exportCSV() {
    const headers = ["id","createdAt","dateRef","evaluator","evaluated","score", ...CONFIG.questions.flatMap(q => [`${q.id}_value`,`${q.id}_reason`])];
    const rows = filtered.map(ev => { const row: any[] = [ev.id, ev.createdAt, ev.dateRef, ev.evaluator, ev.evaluated, ev.score]; for (const q of CONFIG.questions) { const a = ev.answers.find(x=>x.questionId===q.id); row.push(a? (a.value?"SIM":"NÃO") : ""); row.push(a?.reason || ""); } return row; });
    const csv = [headers.join(","), ...rows.map(r => r.map(x=>`"${String(x).replaceAll('"','""')}"`).join(","))].join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob); const a = document.createElement("a"); a.href = url; a.download = "avaliacoes.csv"; a.click(); URL.revokeObjectURL(url);
  }

  function simulateSync() {
    const all = getEvaluations(); let changed = 0; for (const ev of all) { if (inRange(ev.dateRef) && ev.status === "queued") { ev.status = "synced"; changed++; } } setEvaluations(all); alert(`Sincronizados: ${changed}`);
  }

  return (
    <div className="max-w-6xl mx-auto p-4">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-4">
        <Card><div className="text-sm text-gray-500">Total de avaliações</div><div className="text-2xl font-semibold">{filtered.length}</div></Card>
        <Card><div className="text-sm text-gray-500">Colaboradores avaliados</div><div className="text-2xl font-semibold">{new Set(filtered.map(e=>e.evaluated)).size}</div></Card>
        <Card><div className="text-sm text-gray-500">Exportação</div><div className="mt-2 flex gap-2"><Button onClick={exportCSV}>CSV</Button><Button variant="secondary" onClick={simulateSync}>Simular Sync</Button></div></Card>
      </div>

      <Card>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
          <div><FieldLabel htmlFor="from">De</FieldLabel><input id="from" type="date" className="border rounded-xl px-3 py-2 w-full" value={from} onChange={(e)=>setFrom(e.target.value)} /></div>
          <div><FieldLabel htmlFor="to">Até</FieldLabel><input id="to" type="date" className="border rounded-xl px-3 py-2 w-full" value={to} onChange={(e)=>setTo(e.target.value)} /></div>
          <div className="md:col-span-2"><FieldLabel htmlFor="u">Filtrar por colaborador (avaliado)</FieldLabel>
            <select id="u" className="border rounded-xl px-3 py-2 w-full" value={userId} onChange={(e)=>setUserId(e.target.value)}>
              <option value="">Todos</option>
              {getUsers().filter(u=>u.role==="colaborador").map(u => (<option key={u.username} value={u.username}>{u.displayName}</option>))}
            </select>
          </div>
        </div>
      </Card>

      <div className="mt-4 grid grid-cols-1 lg:grid-cols-3 gap-3">
        <Card>
          <div className="text-sm text-gray-500">Média por colaborador (top 5)</div>
          <div className="mt-2 space-y-2">
            {totals.top.map(([u, v]) => { const usr = users.find(x=>x.username===u); const avg = (v.scoreSum / v.n).toFixed(2);
              return <div key={u} className="flex items-center justify-between"><div className="text-sm">{usr?.displayName || u}</div><Badge>{avg}</Badge></div>;
            })}
            {totals.top.length===0 && <div className="text-sm text-gray-600">—</div>}
          </div>
        </Card>
        <Card className="lg:col-span-2">
          <div className="text-sm text-gray-500">Alertas (≥ {Math.round(CONFIG.alertThreshold*100)}%)</div>
          <div className="mt-2 space-y-2">
            {alerts.map(a => { const usr = users.find(x=>x.username===a.evaluated); const q = CONFIG.questions.find(q=>q.id===a.questionId)!;
              return <div key={`${a.evaluated}-${a.questionId}`} className="flex items-center justify-between border rounded-xl px-3 py-2"><div className="text-sm"><b>{usr?.displayName||a.evaluated}</b> — {q.text}</div><Badge>{Math.round(a.pct*100)}% ({a.total})</Badge></div>;
            })}
            {alerts.length===0 && <div className="text-sm text-gray-600">Sem alertas no período.</div>}
          </div>
        </Card>
      </div>

      <div className="mt-4">
        <Card>
          <div className="text-sm text-gray-500">Tabela detalhada</div>
          <div className="overflow-auto mt-2">
            <table className="w-full text-sm">
              <thead><tr className="text-left border-b"><th className="py-2 pr-2">Data</th><th className="py-2 pr-2">Avaliador</th><th className="py-2 pr-2">Avaliado</th><th className="py-2 pr-2">Score</th><th className="py-2 pr-2">Status</th><th className="py-2 pr-2">Respostas</th></tr></thead>
              <tbody>
                {filtered.map(ev => (
                  <tr key={ev.id} className="border-b">
                    <td className="py-2 pr-2 whitespace-nowrap">{formatDateTimeBRdash(new Date(ev.createdAt))}</td>
                    <td className="py-2 pr-2">{(getUsers().find(u=>u.username===ev.evaluator)?.displayName) || ev.evaluator}</td>
                    <td className="py-2 pr-2">{(getUsers().find(u=>u.username===ev.evaluated)?.displayName) || ev.evaluated}</td>
                    <td className="py-2 pr-2">{ev.score}</td>
                    <td className="py-2 pr-2">{ev.status === "synced" ? "Sincronizado" : ev.status === "queued" ? "Pendente" : ev.status}</td>
                    <td className="py-2 pr-2">
                      {ev.answers.map(a => { const q = CONFIG.questions.find(q=>q.id===a.questionId)!; return <div key={a.questionId}><b>{q.order}.</b> {a.value?"SIM":"NÃO"}{a.reason? <> — <i>{a.reason}</i></> : null}</div>; })}
                    </td>
                  </tr>
                ))}
                {filtered.length===0 && <tr><td colSpan={6} className="py-4 text-center text-gray-600">Sem registros.</td></tr>}
              </tbody>
            </table>
          </div>
        </Card>
      </div>
    </div>
  );
}

function AdminPage() {
  // helpers CPF
  const digitsOnly = (s: string) => s.replace(/\D+/g, "");
  function maskCPF(s: string) { const d = digitsOnly(s).slice(0,11); return d.replace(/(\d{3})(\d{3})(\d{3})(\d{0,2})/, (_:any,a:any,b:any,c:any,dg:any)=> `${a}.${b}.${c}${dg?'-'+dg:''}`); }
  function validateCPF(cpf: string) { const d = digitsOnly(cpf); if (d.length !== 11 || /^(\d)\1+$/.test(d)) return false; const calc = (base: string, factor: number) => { let sum = 0; for (let i=0;i<base.length;i++) sum += parseInt(base[i]) * (factor - i); const rest = sum % 11; return (rest < 2) ? 0 : 11 - rest; }; const d1 = calc(d.slice(0,9), 10); const d2 = calc(d.slice(0,10), 11); return d.endsWith(String(d1)+String(d2)); }

  const [users, setLocalUsers] = useState<User[]>(getUsers());
  const [name, setName] = useState(""); const [cpf, setCPF] = useState(""); const [pass, setPass] = useState(""); const [cargo, setCargo] = useState<string>("");
  const [resetTarget, setResetTarget] = useState<User | null>(null);
  const [newPassword, setNewPassword] = useState("");
  const [passSaved, setPassSaved] = useState(false);

  function addUser() {
    if (!name.trim()) { alert("Preencha o nome completo"); return; }
    if (!validateCPF(cpf)) { alert("CPF inválido"); return; }
    if (!pass) { alert("Informe a senha"); return; }
    if (!cargo) { alert("Selecione o cargo"); return; }
    const username = digitsOnly(cpf);
    if (users.some(u => u.username === username)) { alert("Já existe colaborador com este CPF"); return; }
    const role: Role = cargo === 'Admin' ? 'admin' : 'colaborador';
    const u: User = { id: uuid(), displayName: name.trim(), username, password: pass, role, active: true, cargo, cpf: username };
    const newList = [...users, u]; setUsers(newList); setLocalUsers(newList);
    setName(""); setCPF(""); setPass(""); setCargo("");
  }
  function toggleActive(u: User) { const newList = users.map(x => x.username===u.username? { ...x, active: !x.active } : x); setUsers(newList); setLocalUsers(newList); }
  function resetPass(u: User) { setResetTarget(u); setNewPassword(""); }
  function saveNewPass() {
    if (!resetTarget) return; if (!newPassword) { alert('Informe a nova senha'); return; }
    const newList = users.map(x => x.username===resetTarget.username? { ...x, password: newPassword } : x);
    setUsers(newList); setLocalUsers(newList); setResetTarget(null); setPassSaved(true); setTimeout(()=>setPassSaved(false), 1000);
  }

  return (
    <div className="max-w-5xl mx-auto p-4">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-4">
        <Card>
          <div className="text-sm text-gray-500">Registrar Colaborador</div>
          <div className="mt-2 flex flex-col gap-2">
            <input placeholder="Nome completo" className="border rounded-xl px-3 py-2" value={name} onChange={(e)=>setName(e.target.value)} />
            <input placeholder="CPF" className="border rounded-xl px-3 py-2" value={cpf} onChange={(e)=>setCPF(maskCPF(e.target.value))} />
            <input placeholder="Senha" type="password" className="border rounded-xl px-3 py-2" value={pass} onChange={(e)=>setPass(e.target.value)} />
            <select className="border rounded-xl px-3 py-2" value={cargo} onChange={(e)=>setCargo(e.target.value)}>
              <option value="">Selecione o cargo...</option>
              <option>Motorista</option>
              <option>Ajudante</option>
              <option>Admin</option>
            </select>
            <div className="flex justify-center">
              <Button onClick={addUser}>Registrar</Button>
            </div>
          </div>
        </Card>
        <Card className="md:col-span-2">
          <div className="text-sm text-gray-500">Usuários</div>
          <div className="mt-2 grid gap-2">
            {users.map(u => (
              <div key={u.username} className="flex items-center justify-between border rounded-xl px-4 py-3">
                <div>
                  <div className="font-medium">{u.displayName} {u.cargo && <span className="ml-2 text-xs px-2 py-0.5 rounded-full border">{u.cargo}</span>} {u.role==='admin' && <span className="ml-2 text-xs px-2 py-0.5 rounded-full border">admin</span>}</div>
                  <div className="text-xs text-gray-600">Login: {u.cpf ? maskCPF(u.cpf) : u.username}</div>
                  {!u.active && <div className="text-xs text-red-600">Inativo</div>}
                </div>
                <div className="flex gap-2">
                  <Button variant="accent" onClick={()=>toggleActive(u)}>{u.active?"Desativar":"Ativar"}</Button>
                  <Button variant="secondary" onClick={()=>resetPass(u)}>Redefinir Senha</Button>
                </div>
              </div>
            ))}
          </div>
        </Card>
      </div>

      {resetTarget && (
        <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center z-20">
          <div className="bg-white border rounded-2xl p-6 w-full max-w-sm shadow-lg">
            <div className="text-lg font-semibold mb-2">Redefinir senha</div>
            <div className="text-sm text-gray-600 mb-3">Usuário: <b>{resetTarget.displayName}</b></div>
            <input type="password" placeholder="Nova senha" className="border rounded-xl px-3 py-2 w-full" value={newPassword} onChange={(e)=>setNewPassword(e.target.value)} />
            <div className="mt-4 flex justify-end gap-2">
              <Button variant="ghost" onClick={()=>setResetTarget(null)}>Cancelar</Button>
              <Button onClick={saveNewPass}>Salvar</Button>
            </div>
          </div>
        </div>
      )}

      {passSaved && (
        <div className="fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center z-10">
          <div className="bg-white border rounded-2xl p-6 text-center shadow-lg">
            <div className="mx-auto mb-2 h-10 w-10 rounded-full border-2 flex items-center justify-center">✓</div>
            <div className="text-sm">Senha atualizada com sucesso</div>
          </div>
        </div>
      )}
    </div>
  );
}

/*************************
 * 8) LAYOUT & ROTEADOR
 *************************/

function Navbar({ user, route, onNavigate }: { user: User | null; route: Route; onNavigate: (r: Route) => void }) {
  return (
    <div className="sticky top-0 z-10 bg-white/80 backdrop-blur border-b">
      <div className="max-w-6xl mx-auto px-4 h-14 flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="w-3 h-3 rounded-full bg-gradient-to-br from-emerald-500 to-emerald-700 shadow ring-1 ring-emerald-600/30"></div>
          <span className="font-semibold tracking-tight">{CONFIG.appName}</span>
        </div>
        <div className="flex items-center gap-2">
          {user ? (
            <>
              {user.role === "colaborador" && (
                <Button variant={route==="selectPartner"?"secondary":"ghost"} onClick={()=>onNavigate("selectPartner")}>Parceiro</Button>
              )}
              {user.role === "admin" && (
                <>
                  <Button variant={route==="dashboard"?"secondary":"ghost"} onClick={()=>onNavigate("dashboard")}>Dashboard</Button>
                  <Button variant={route==="selectPartner"?"secondary":"ghost"} onClick={()=>onNavigate("selectPartner")}>Informar</Button>
                  <Button variant={route==="admin"?"secondary":"ghost"} onClick={()=>onNavigate("admin")}>Admin</Button>
                </>
              )}
              <div className="mx-2 text-sm text-gray-600">Olá, {user.displayName}</div>
              <Button variant="ghost" onClick={()=>{ logout(); onNavigate("login"); }}>Sair</Button>
            </>
          ) : (
            <Button onClick={()=>onNavigate("login")}>Entrar</Button>
          )}
        </div>
      </div>
    </div>
  );
}

function runSmokeTests() {
  try {
    console.assert(Array.isArray(getUsers()), "Users deve ser array");
    const me = CONFIG.seedUsers.find(u=>u.username==='teste');
    if (me) {
      const partners = getAllowedPartnersForDate(me as any, toDateRefBR());
      console.assert(partners.every(p=>p.username!==me!.username), "Parceiros não devem incluir o próprio usuário");
    }
    // Testes extra (sanidade)
    console.assert(calcScore([
      { questionId: 'pontualidade', value: true },
      { questionId: 'conduta', value: true },
      { questionId: 'desvio_rota', value: false },
      { questionId: 'avaria', value: false },
    ] as any, CONFIG.questions) === 1, "Score perfeito deve ser 1");
    const dash = formatDateTimeBRdash(new Date());
    console.assert(/\d{2}\/\d{2}\/\d{4} - \d{2}:\d{2}:\d{2}/.test(dash), "Formato BR com hífen está correto");
  } catch {}
}

export default function App() {
  const [route, setRoute] = useState<Route>("login");
  const [me, setMe] = useState<User | null>(null);
  const [partner, setPartner] = useState<User | null>(null);

  const [booting, setBooting] = useState(true);

  useEffect(() => { seedDefaults(); ensureFirstLogin(); runSmokeTests(); const u = currentUser(); setMe(u); setRoute(u ? (u.role === "admin" ? "dashboard" : "selectPartner") : "login"); const t = setTimeout(()=>setBooting(false), 900); return () => clearTimeout(t); }, []);
  useEffect(() => { const u = currentUser(); setMe(u); if (!u) { setRoute("login"); return; } if (u.role === "colaborador" && (route === "dashboard" || route === "admin")) setRoute("selectPartner"); }, [route]);

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {booting && (
        <div className="fixed inset-0 flex items-center justify-center bg-gray-50 z-50">
          <div className="text-center bg-white/80 backdrop-blur border rounded-3xl px-10 py-12 shadow-lg">
            <div className="mx-auto mb-4 w-4 h-4 rounded-full bg-gradient-to-br from-emerald-500 to-emerald-700 shadow ring-1 ring-emerald-600/30"></div>
            <div className="text-2xl font-bold">Sistema de Acompanhamento Diário</div>
            <div className="text-lg text-gray-600">Ouro Verde</div>
            <div className="mx-auto mt-4 h-10 w-10 rounded-full border-2 border-gray-300 border-t-emerald-600 animate-spin" />
          </div>
        </div>
      )}
      <Navbar user={me} route={route} onNavigate={setRoute} />
      <main className="flex-1">
        {(!me || route === "login") && <LoginPage onLoggedIn={()=>setRoute("selectPartner")} />}
        {me && route === "selectPartner" && <SelectPartnerPage me={me} onSelected={(u)=>{ const found = getUsers().find(x=>x.username===u)!; setPartner(found); setRoute("checklist"); }} />}
        {me && partner && route === "checklist" && <ChecklistPage me={me} evaluated={partner} onSaved={()=>setRoute("selectPartner")} />}
        {me && route === "dashboard" && <DashboardPage />}
        {me && me.role === "admin" && route === "admin" && <AdminPage />}
        {me && me.role !== "admin" && route === "admin" && <div className="max-w-3xl mx-auto p-4"><Card><div className="text-sm text-red-600">Acesso negado. Apenas administradores.</div></Card></div>}
      </main>
      <footer className="mt-auto border-t bg-white/70 backdrop-blur">
        <div className="max-w-6xl mx-auto p-6 text-xs text-gray-600 text-center">
          Sistema de Acompanhamento Diário © 2025. Criado por Jucélio Verissimo.
        </div>
      </footer>
    </div>
  );
}
